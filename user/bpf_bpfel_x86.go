// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64
// +build 386 amd64

package user

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfConnInfoEvt struct {
	Info struct {
		ReadBytes  uint32
		WriteBytes uint32
		ConnId     struct {
			Upid bpfUpidT
			Fd   int32
			_    [4]byte
			Tsid uint64
		}
		Saddr struct {
			In4 struct {
				SinFamily uint16
				SinPort   uint16
				SinAddr   struct{ S_addr uint32 }
				Pad       [8]uint8
			}
			_ [12]byte
		}
		Daddr struct {
			In4 struct {
				SinFamily uint16
				SinPort   uint16
				SinAddr   struct{ S_addr uint32 }
				Pad       [8]uint8
			}
			_ [12]byte
		}
		Protocol int32
		MsgType  int32
		Ctype    int32
		Role     int32
	}
	Ts uint64
}

type bpfMsgEvtData struct {
	Meta struct {
		TgidFd  uint64
		Ts      uint64
		Seq     uint32
		MsgType int32
	}
	BufSize uint32
	Msg     [30720]int8
	_       [4]byte
}

type bpfSoEvent struct {
	SrcAddr       uint32
	DstAddr       uint32
	SrcPort       uint16
	DstPort       uint16
	PayloadLength uint32
}

type bpfUpidT struct {
	Pid            uint32
	Tgid           uint32
	StartTimeTicks uint64
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	KprobeSysAccept                   *ebpf.ProgramSpec `ebpf:"kprobe_sys_accept"`
	KretprobeSysAccept                *ebpf.ProgramSpec `ebpf:"kretprobe_sys_accept"`
	KtcpCleanupRbuf                   *ebpf.ProgramSpec `ebpf:"ktcp_cleanup_rbuf"`
	KtcpSendmsg                       *ebpf.ProgramSpec `ebpf:"ktcp_sendmsg"`
	SocketHander                      *ebpf.ProgramSpec `ebpf:"socket_hander"`
	TcEgress                          *ebpf.ProgramSpec `ebpf:"tc_egress"`
	TracepointSyscallsSysExitAccept4  *ebpf.ProgramSpec `ebpf:"tracepoint__syscalls__sys_exit_accept4"`
	TracepointSyscallsSysExitConnect  *ebpf.ProgramSpec `ebpf:"tracepoint__syscalls__sys_exit_connect"`
	TracepointSyscallsSysEnterAccept4 *ebpf.ProgramSpec `ebpf:"tracepoint_syscalls_sys_enter_accept4"`
	TracepointSyscallsSysEnterClose   *ebpf.ProgramSpec `ebpf:"tracepoint_syscalls_sys_enter_close"`
	TracepointSyscallsSysEnterConnect *ebpf.ProgramSpec `ebpf:"tracepoint_syscalls_sys_enter_connect"`
	TracepointSyscallsSysEnterRead    *ebpf.ProgramSpec `ebpf:"tracepoint_syscalls_sys_enter_read"`
	TracepointSyscallsSysEnterWrite   *ebpf.ProgramSpec `ebpf:"tracepoint_syscalls_sys_enter_write"`
	TracepointSyscallsSysExitClose    *ebpf.ProgramSpec `ebpf:"tracepoint_syscalls_sys_exit_close"`
	TracepointSyscallsSysExitRead     *ebpf.ProgramSpec `ebpf:"tracepoint_syscalls_sys_exit_read"`
	TracepointSyscallsSysExitWrite    *ebpf.ProgramSpec `ebpf:"tracepoint_syscalls_sys_exit_write"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	AcceptArgsMap   *ebpf.MapSpec `ebpf:"accept_args_map"`
	CloseArgsMap    *ebpf.MapSpec `ebpf:"close_args_map"`
	ConnEvtRb       *ebpf.MapSpec `ebpf:"conn_evt_rb"`
	ConnInfoMap     *ebpf.MapSpec `ebpf:"conn_info_map"`
	ConnectArgsMap  *ebpf.MapSpec `ebpf:"connect_args_map"`
	Httpevent       *ebpf.MapSpec `ebpf:"httpevent"`
	Ipv4RecvBytes   *ebpf.MapSpec `ebpf:"ipv4_recv_bytes"`
	Ipv4SendBytes   *ebpf.MapSpec `ebpf:"ipv4_send_bytes"`
	MsgDataMap      *ebpf.MapSpec `ebpf:"msg_data_map"`
	MsgEvtRb        *ebpf.MapSpec `ebpf:"msg_evt_rb"`
	ProcHttpSession *ebpf.MapSpec `ebpf:"proc_http_session"`
	ReadArgsMap     *ebpf.MapSpec `ebpf:"read_args_map"`
	TcDaddrMap      *ebpf.MapSpec `ebpf:"tc_daddr_map"`
	WriteArgsMap    *ebpf.MapSpec `ebpf:"write_args_map"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	AcceptArgsMap   *ebpf.Map `ebpf:"accept_args_map"`
	CloseArgsMap    *ebpf.Map `ebpf:"close_args_map"`
	ConnEvtRb       *ebpf.Map `ebpf:"conn_evt_rb"`
	ConnInfoMap     *ebpf.Map `ebpf:"conn_info_map"`
	ConnectArgsMap  *ebpf.Map `ebpf:"connect_args_map"`
	Httpevent       *ebpf.Map `ebpf:"httpevent"`
	Ipv4RecvBytes   *ebpf.Map `ebpf:"ipv4_recv_bytes"`
	Ipv4SendBytes   *ebpf.Map `ebpf:"ipv4_send_bytes"`
	MsgDataMap      *ebpf.Map `ebpf:"msg_data_map"`
	MsgEvtRb        *ebpf.Map `ebpf:"msg_evt_rb"`
	ProcHttpSession *ebpf.Map `ebpf:"proc_http_session"`
	ReadArgsMap     *ebpf.Map `ebpf:"read_args_map"`
	TcDaddrMap      *ebpf.Map `ebpf:"tc_daddr_map"`
	WriteArgsMap    *ebpf.Map `ebpf:"write_args_map"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.AcceptArgsMap,
		m.CloseArgsMap,
		m.ConnEvtRb,
		m.ConnInfoMap,
		m.ConnectArgsMap,
		m.Httpevent,
		m.Ipv4RecvBytes,
		m.Ipv4SendBytes,
		m.MsgDataMap,
		m.MsgEvtRb,
		m.ProcHttpSession,
		m.ReadArgsMap,
		m.TcDaddrMap,
		m.WriteArgsMap,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	KprobeSysAccept                   *ebpf.Program `ebpf:"kprobe_sys_accept"`
	KretprobeSysAccept                *ebpf.Program `ebpf:"kretprobe_sys_accept"`
	KtcpCleanupRbuf                   *ebpf.Program `ebpf:"ktcp_cleanup_rbuf"`
	KtcpSendmsg                       *ebpf.Program `ebpf:"ktcp_sendmsg"`
	SocketHander                      *ebpf.Program `ebpf:"socket_hander"`
	TcEgress                          *ebpf.Program `ebpf:"tc_egress"`
	TracepointSyscallsSysExitAccept4  *ebpf.Program `ebpf:"tracepoint__syscalls__sys_exit_accept4"`
	TracepointSyscallsSysExitConnect  *ebpf.Program `ebpf:"tracepoint__syscalls__sys_exit_connect"`
	TracepointSyscallsSysEnterAccept4 *ebpf.Program `ebpf:"tracepoint_syscalls_sys_enter_accept4"`
	TracepointSyscallsSysEnterClose   *ebpf.Program `ebpf:"tracepoint_syscalls_sys_enter_close"`
	TracepointSyscallsSysEnterConnect *ebpf.Program `ebpf:"tracepoint_syscalls_sys_enter_connect"`
	TracepointSyscallsSysEnterRead    *ebpf.Program `ebpf:"tracepoint_syscalls_sys_enter_read"`
	TracepointSyscallsSysEnterWrite   *ebpf.Program `ebpf:"tracepoint_syscalls_sys_enter_write"`
	TracepointSyscallsSysExitClose    *ebpf.Program `ebpf:"tracepoint_syscalls_sys_exit_close"`
	TracepointSyscallsSysExitRead     *ebpf.Program `ebpf:"tracepoint_syscalls_sys_exit_read"`
	TracepointSyscallsSysExitWrite    *ebpf.Program `ebpf:"tracepoint_syscalls_sys_exit_write"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.KprobeSysAccept,
		p.KretprobeSysAccept,
		p.KtcpCleanupRbuf,
		p.KtcpSendmsg,
		p.SocketHander,
		p.TcEgress,
		p.TracepointSyscallsSysExitAccept4,
		p.TracepointSyscallsSysExitConnect,
		p.TracepointSyscallsSysEnterAccept4,
		p.TracepointSyscallsSysEnterClose,
		p.TracepointSyscallsSysEnterConnect,
		p.TracepointSyscallsSysEnterRead,
		p.TracepointSyscallsSysEnterWrite,
		p.TracepointSyscallsSysExitClose,
		p.TracepointSyscallsSysExitRead,
		p.TracepointSyscallsSysExitWrite,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfel_x86.o
var _BpfBytes []byte
