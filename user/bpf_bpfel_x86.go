// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64
// +build 386 amd64

package user

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfDataKey struct {
	SrcIp   uint32
	DstIp   uint32
	SrcPort uint16
	DstPort uint16
}

type bpfDataValue struct{ Timestamp int32 }

type bpfSslDataEventT struct {
	Type        int32
	_           [4]byte
	TimestampNs uint64
	Pid         uint32
	Tid         uint32
	Data        [4000]int8
	DataLen     int32
	_           [4]byte
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *bpfObjects
//     *bpfPrograms
//     *bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	KtcpSendmsg       *ebpf.ProgramSpec `ebpf:"ktcp_sendmsg"`
	PacketCounter     *ebpf.ProgramSpec `ebpf:"packet_counter"`
	SocketHander      *ebpf.ProgramSpec `ebpf:"socket_hander"`
	TcEgress          *ebpf.ProgramSpec `ebpf:"tc_egress"`
	UprobeSsL_write   *ebpf.ProgramSpec `ebpf:"uprobe_ssL_write"`
	UretprobeSslWrite *ebpf.ProgramSpec `ebpf:"uretprobe_ssl_write"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	ActiveSslWriteArgsMap *ebpf.MapSpec `ebpf:"active_ssl_write_args_map"`
	Counter               *ebpf.MapSpec `ebpf:"counter"`
	DataBufferHeap        *ebpf.MapSpec `ebpf:"data_buffer_heap"`
	Httpevent             *ebpf.MapSpec `ebpf:"httpevent"`
	ProcHttpSession       *ebpf.MapSpec `ebpf:"proc_http_session"`
	TcpMap                *ebpf.MapSpec `ebpf:"tcp_map"`
	TlsEvents             *ebpf.MapSpec `ebpf:"tls_events"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	ActiveSslWriteArgsMap *ebpf.Map `ebpf:"active_ssl_write_args_map"`
	Counter               *ebpf.Map `ebpf:"counter"`
	DataBufferHeap        *ebpf.Map `ebpf:"data_buffer_heap"`
	Httpevent             *ebpf.Map `ebpf:"httpevent"`
	ProcHttpSession       *ebpf.Map `ebpf:"proc_http_session"`
	TcpMap                *ebpf.Map `ebpf:"tcp_map"`
	TlsEvents             *ebpf.Map `ebpf:"tls_events"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.ActiveSslWriteArgsMap,
		m.Counter,
		m.DataBufferHeap,
		m.Httpevent,
		m.ProcHttpSession,
		m.TcpMap,
		m.TlsEvents,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	KtcpSendmsg       *ebpf.Program `ebpf:"ktcp_sendmsg"`
	PacketCounter     *ebpf.Program `ebpf:"packet_counter"`
	SocketHander      *ebpf.Program `ebpf:"socket_hander"`
	TcEgress          *ebpf.Program `ebpf:"tc_egress"`
	UprobeSsL_write   *ebpf.Program `ebpf:"uprobe_ssL_write"`
	UretprobeSslWrite *ebpf.Program `ebpf:"uretprobe_ssl_write"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.KtcpSendmsg,
		p.PacketCounter,
		p.SocketHander,
		p.TcEgress,
		p.UprobeSsL_write,
		p.UretprobeSslWrite,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed bpf_bpfel_x86.o
var _BpfBytes []byte
